package main

const detailedHelp = `PCX2BMP — Конвертер изображений в формате PCX (True Color) 
в 8-битный (256-цветный) BMP с использованием 
частотного квантования (часто называемого "частотной выборкой палитры").

ОСНОВНОЙ КОНВЕЙЕР РАБОТЫ (ГОРУТИНЫ + КАНАЛЫ):
----------------------------------------------------------------------
1. В главной функции объявляются три канала и три горутины. Они образуют
   "конвейер" (pipeline) по чтению, квантованию и записи изображения:

   - Первая горутина: LoadPCX
       * Открывает и читает PCX-файл.
       * Декодирует заголовок PCX (PCXHeader), чтобы узнать размеры (Width, Height) 
         и другие параметры.
       * Если в PCX содержится палитра (последние 768 байт), считывает её. Иначе 
         пытается взять палитру из заголовка (16 цветов).
       * Затем читает пиксели построчно с учётом RLE-кодирования (если оно есть). 
         Каждый считанный байт сверяется с палитрой, и в итоге получается массив
         (Width * Height) пикселей (ImageData.Pix).

     После чтения PCX формируется структура ImageData:
       - Width, Height: размеры изображения.
       - Pix: слайс ColorRGB, хранящий полный RGB для каждого пикселя.
       - Palette: пока не важна (для TrueColor PCX). 
       - HasPal: ставится в false (по сути не используется здесь).

     Когда структура ImageData готова, она отправляется в канал pcxDataCh.

   - Вторая горутина: FreqQuantizer.Quantize
       * Принимает ImageData из pcxDataCh.
       * Считает, как часто встречаются те или иные цвета (ColorRGB) 
         во всём изображении.
       * Сортирует эти цвета по убыванию частоты и выбирает 256 самых популярных.
       * Создаёт новую "палитру" размером 256 (ImageData.Palette).
       * Затем для каждого пикселя ищет ближайший цвет из новой палитры 
         (по евклидовому расстоянию в пространстве R, G, B).
       * Формирует выходный массив пикселей (Width * Height), 
         где в поле R хранится индекс палитры (от 0 до 255).
       * Выдаёт результат (также в структуре ImageData, но уже c HasPal = true) 
         в канал quantDataCh.

   - Третья горутина: SaveBMP
       * Читает из quantDataCh готовые 8-битные данные.
       * Записывает их в BMP-файл:
         - Формирует заголовок BMP (54 байта) + цветовую таблицу (256 * 4 байта).
         - В каждом пикселе записывается индекс палитры (т. е. байт от 0 до 255).
         - Окончание: отправляет сигнал через канал done о том, что конвертация 
           и запись BMP завершены.

2. Главная функция (main), в параллели с этими горутинами, 
   ждёт либо ошибку (в канале errCh), либо успешное завершение (в канале done). 
   Как только что-то из этого приходит, программа прерывает ожидание, 
   закрывает каналы и дожидается (через WaitGroup) окончания всех горутин.

3. По завершении конвейера в main:
   - Повторно загружает исходный PCX (чтобы отобразить "до" — оригинал).
   - Загружает полученный BMP-файл (чтобы отобразить "после" — 256 цветов).

4. ДЛЯ ПОКАЗА:
   Программа может создать 2 окна в SDL2:
   - Одно окно для исходного PCX-изображения.
   - Второе окно для результата (8-бит BMP).
   События (закрытие окна, QuitEvent) обрабатываются в одном цикле (showLoop):
   при закрытии любого окна программа выходит из цикла и завершает работу.


ПРИНЦИП ЧАСТОТНОГО КВАНТОВАНИЯ:
----------------------------------------------------------------------
Алгоритм "частотного" или "популярного" квантования (Popularity / Frequency-based):
1. Пройтись по всем пикселям исходного изображения; 
   собрать статистику, сколько раз встречается каждый цвет (R,G,B).
2. Отсортировать все уникальные цвета по убыванию их частоты.
3. Взять первые 256 наиболее часто встречающихся цветов — это и будет новая палитра.
4. Для каждого пикселя найти ближайший цвет из этой палитры (по формуле расстояния):
   
       dist = (R1 - R2)^2 + (G1 - G2)^2 + (B1 - B2)^2
5. Заменить цвет пикселя на индекс в новой палитре (0..255).
6. Итоговое изображение сохраняется как 8-бит BMP, где запись идёт индексами.

ИСПОЛЬЗОВАНИЕ:
----------------------------------------------------------------------
  pcx2bmp <входной файл> [опции]

ОПЦИИ:
----------------------------------------------------------------------
  -o, --output <файл>  Имя выходного BMP-файла (по умолчанию <input>.bmp)
  -s, --show           Отобразить изображение после конвертации
  -v, --version        Показать версию программы
  -h, --help           Показать эту справку

ПРИМЕРЫ:
----------------------------------------------------------------------
  pcx2bmp image.pcx               # Конвертировать в image.bmp
  pcx2bmp image.pcx -o result.bmp # Указать имя выходного файла
  pcx2bmp image.pcx --show        # Конвертировать и показать изображение
`
